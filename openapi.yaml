openapi: 3.1.0
info:
  title: Bookora API
  version: 1.0.0
  description: API for the multi-tenant SaaS booking platform.
  contact:
    name: Nguyen Pham
    email: nguyenminhpham24@gmail.com
servers:
- url: http://localhost:4020
  description: Local Prism mock
- url: https://api.booking.example.com
  description: Placeholder production
- url: https://{tenant}.api.booking.example.com
  description: Tenant subdomain
  variables:
    tenant:
      default: demo
      description: Tenant subdomain, e.g. "glow"
tags:
- name: health
- name: auth
- name: tenants
- name: services
- name: resources
- name: availability
- name: bookings
- name: chat
- name: notifications
security:
- bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Date:
      name: date
      in: query
      required: true
      description: ISO date (YYYY-MM-DD)
      schema:
        type: string
        format: date
    ServiceId:
      name: serviceId
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: Prevents duplicate booking creation on retries.
      schema:
        type: string
        minLength: 8
        maxLength: 255
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSize:
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 12
    From:
      name: from
      in: query
      required: false
      description: ISO date-time (UTC) start filter
      schema:
        type: string
        format: date-time
    To:
      name: to
      in: query
      required: false
      description: ISO date-time (UTC) end filter
      schema:
        type: string
        format: date-time
    Status:
      name: status
      in: query
      required: false
      schema:
        type: string
        enum:
        - pending
        - confirmed
        - cancelled
  schemas:
    Id:
      type: string
      format: uuid
      examples:
      - b1b2b3b4-1111-2222-3333-444455556666
    Error:
      type: object
      required:
      - error
      properties:
        error:
          type: object
          required:
          - code
          - message
          properties:
            code:
              type: string
              example: NOT_FOUND
            message:
              type: string
              example: Resource not found.
            details:
              type: object
              additionalProperties: true
    Money:
      type: object
      required:
      - currency
      - amount
      properties:
        currency:
          type: string
          enum:
          - USD
          - VND
          example: VND
        amount:
          type: number
          format: float
          example: 150000
    User:
      type: object
      required:
      - id
      - email
      - name
      - role
      - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
          - owner
          - staff
          - customer
          example: owner
        createdAt:
          type: string
          format: date-time
    Tenant:
      type: object
      required:
      - id
      - name
      - subdomain
      - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Glow Spa
        subdomain:
          type: string
          example: glow
        createdAt:
          type: string
          format: date-time
        timezone:
          type: string
          example: Asia/Bangkok
    Service:
      type: object
      required:
      - id
      - name
      - durationMinutes
      - price
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Massage 60m
        durationMinutes:
          type: integer
          example: 60
        price:
          $ref: '#/components/schemas/Money'
    Resource:
      type: object
      required:
      - id
      - name
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Room A
    AvailabilitySlot:
      type: object
      required:
      - start
      - end
      - resourceId
      properties:
        start:
          type: string
          format: date-time
          example: '2025-09-18T08:00:00Z'
        end:
          type: string
          format: date-time
          example: '2025-09-18T09:00:00Z'
        resourceId:
          $ref: '#/components/schemas/Id'
    Booking:
      type: object
      required:
      - id
      - tenantId
      - serviceId
      - resourceId
      - start
      - end
      - status
      - customerName
      - customerEmail
      - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        tenantId:
          $ref: '#/components/schemas/Id'
        serviceId:
          $ref: '#/components/schemas/Id'
        resourceId:
          $ref: '#/components/schemas/Id'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - pending
          - confirmed
          - cancelled
          example: pending
        customerName:
          type: string
          example: Alice
        customerEmail:
          type: string
          format: email
          example: alice@example.com
        createdAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: secret
    RegisterRequest:
      type: object
      required:
      - name
      - email
      - password
      properties:
        name:
          type: string
          example: Alice
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 60
    AuthResponse:
      type: object
      required:
      - accessToken
      - tokenType
      - user
      properties:
        accessToken:
          type: string
          example: eyJhbGciOi...
        tokenType:
          type: string
          example: Bearer
        user:
          $ref: '#/components/schemas/User' 
    TenantCreateRequest:
      type: object
      required:
      - name
      - subdomain
      properties:
        name:
          type: string
          example: Glow Spa
        subdomain:
          type: string
          example: glow
    BookingCreateRequest:
      type: object
      required:
      - serviceId
      - resourceId
      - start
      - customer
      properties:
        serviceId:
          $ref: '#/components/schemas/Id'
        resourceId:
          $ref: '#/components/schemas/Id'
        start:
          type: string
          format: date-time
          example: '2025-09-18T08:00:00Z'
        customer:
          type: object
          required:
          - name
          - email
          properties:
            name:
              type: string
              example: Alice
            email:
              type: string
              format: email
              example: alice@example.com
    PaginationMeta:
      type: object
      required:
      - page
      - pageSize
      - total
      - totalPages
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 12
        total:
          type: integer
          example: 125
        totalPages:
          type: integer
          example: 11
paths:
  /health:
    get:
      tags:
      - health
      operationId: healthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: ok
      security: []

  /auth/login:
    post:
      tags:
      - auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                accessToken: eyJhbGciOi...
                tokenType: Bearer
                user:
                  id: 2f1b45a8-44a2-4d3f-9a2a-5e8c0f2a8b99
                  email: alice@example.com
                  name: Alice
                  role: customer
                  createdAt: '2025-08-20T08:00:00Z'
      security: []

  /auth/register:
    post:
      tags:
      - auth
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
      security: []

  /tenants:
    post:
      tags:
      - tenants
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Tenant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
              example:
                id: 77777777-7777-7777-7777-777777777777
                name: Glow Spa
                subdomain: glow
                createdAt: '2025-09-17T08:00:00Z'
      security: []

  /services:
    get:
      tags:
      - services
      operationId: listServices
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
              example:
                data:
                - id: 11111111-1111-1111-1111-111111111111
                  name: Massage 60m
                  durationMinutes: 60
                  price:
                    currency: VND
                    amount: 350000
      security: []

  /availability:
    get:
      tags:
      - availability
      operationId: getAvailability
      parameters:
      - $ref: '#/components/parameters/ServiceId'
      - $ref: '#/components/parameters/Date'
      responses:
        '200':
          description: Availability slots for a service on a date
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AvailabilitySlot'
              example:
                data:
                - start: '2025-09-18T08:00:00Z'
                  end: '2025-09-18T09:00:00Z'
                  resourceId: abcdabcd-abcd-abcd-abcd-abcdabcdabcd
      description: ' Times are in ISO 8601; interpret relative to tenant timezone
        unless otherwise stated; examples use ''Z'' (UTC).'
      security: []

  /bookings:
    post:
      tags:
      - bookings
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateRequest'
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              example:
                id: 99999999-9999-9999-9999-999999999999
                tenantId: 77777777-7777-7777-7777-777777777777
                serviceId: 11111111-1111-1111-1111-111111111111
                resourceId: abcdabcd-abcd-abcd-abcd-abcdabcdabcd
                start: '2025-09-18T08:00:00Z'
                end: '2025-09-18T09:00:00Z'
                status: pending
                customerName: Alice
                customerEmail: alice@example.com
                createdAt: '2025-09-18T07:00:00Z'
        '409':
          description: Slot no longer available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
      - $ref: '#/components/parameters/IdempotencyKey'
      security: []
    get:
      tags:
      - bookings
      operationId: listBookings
      parameters:
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/From'
      - $ref: '#/components/parameters/To'
      - $ref: '#/components/parameters/Status'
      responses:
        '200':
          description: Paginated bookings
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                - meta
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /bookings/{id}:
    patch:
      tags:
      - bookings
      operationId: rescheduleBooking
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                  example: '2025-09-19T10:00:00Z'
      responses:
        '200':
          description: Booking updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: New slot no longer available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
      - bookings
      operationId: getBooking
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /resources:
    get:
      tags:
      - resources
      operationId: listResources
      parameters:
      - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: List resources for a service
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
      security: []

  /bookings/{id}/confirm:
    post:
      tags:
      - bookings
      operationId: confirmBooking
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Booking confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Slot conflict or invalid transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{id}/cancel:
    post:
      tags:
      - bookings
      operationId: cancelBooking
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Booking cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
